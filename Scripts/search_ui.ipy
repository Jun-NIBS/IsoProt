"""
This module displays a user interface to define all settings
required to run a MS/MS search and the subsequent label-free
analysis.

Input (search_ui_in):
  :key on_complete_description: Text of the button displayed once the experimental
                                design has been saved. If this is not set, nothing will
                                be displayed once the user clicks "Save design"
  :key on_complete_function: Function called once the user clicked the complete button.

Output (search_ui_out):
    :key work_dir: Path to the working directory.
    :key precursor_tolerance: Precursor tolerance in ppm.
    :key fragment_tolerance: Fragment tolerance in Da.
    :key fasta_file: Path to the FASTA file.
    :key generate_decoy: Boolean indicating whether to generate decoy sequences.
    :key quantification_ptms: PTMs used by the quantification method (as string).
    :key quantification_method: Name of the quantification method.
    :key missed_cleavages: Number of missed cleavages allowed.
    :key fixed_mods: PTM string showing the fixed modifications set.
    :key var_mods: List of variable PTMs.
    :key summarization_method: Summarization method to use to combined peptide quantification values to proteins.
    :key min_protein_psms: Minimum PSMs per protein required.
    :key use_ptms_for_quant: Indicates whether PTMs should be used for the quantification.
    :key target_fdr: Target FDR to use (all levels).
    :key spec_file_dir: Path to the spectrum directory.
    :key num_groups: Number of experimental conditions.
"""

import ipywidgets as widgets
from ipywidgets import VBox, Label
import os
import pandas as pd
from IPython.display import Javascript, display
import json


global search_ui_in, search_ui_out


def main():
    global search_ui_in, search_ui_out

    # create the input object if it doesn't exist
    if "search_ui_in" not in globals():
        raise Exception("Missing required input parameter search_ui_in")
    else:
        if "on_complete_description" not in search_ui_in:
            raise Exception("Missing required input key 'on_complete_description'")
        if "on_complete_function" not in search_ui_in:
            raise Exception("Missing required input key 'on_complete_function'")

    # display the UI
    searchUI = SearchUI()
    searchUI.display()


def final_button_clicked(searchUI, exp_design_file_path):
    """
    This function is executed once the user clicked the final
    button to execute the next step.
    :param searchUI:
    :param exp_design_file_path:
    """
    global search_ui_in, search_ui_out

    # create the output object
    search_ui_out = searchUI.get_settings_as_dict()

    # add the experimental design path
    search_ui_out["exp_design_file"] = exp_design_file_path

    # execute the user defined function
    if search_ui_in["on_complete_function"]:
        search_ui_in["on_complete_function"]()


class SearchUI:
    """
    Class used to manage the search specific user interface.
    """
    def __init__(self):
        """
        Initializes the SearchUI object and creates all user interface
        objects as member variables.
        """

        # working directory
        self.work_dir_select = widgets.Dropdown(options={'/data/': '/data/', 'Example files': '/home/biodocker/'},
                                                value='/home/biodocker/')
        self.work_dir_select.observe(
            lambda change: self.updateFastaFiles(change["new"]) if change['type'] == 'change' and change['name'] == 'value' else None
        )

        # basic search settings
        self.precursor_tolerance = widgets.IntSlider(min=-10, max=30, step=1, value=10)
        self.fragment_tolerance = widgets.BoundedFloatText(min=0, max=200, value=0.05)
        self.fasta_db = widgets.Dropdown(options={"sp_human.fasta": "IN/sp_human.fasta"})

        self.generate_decoy = widgets.Checkbox(value=True, description="Generate decoy sequences")
        self.target_fdr = widgets.BoundedFloatText(min=0, max=1, value=0.01)

        # TODO  needs table to describe labeling formats
        self.labelling = widgets.Dropdown(options=
                                          {'TMT6': 'TMT 6-plex of K,TMT 6-plex of peptide N-term',
                                           'TMT10': 'TMT 10-plex of K,TMT 10-plex of peptide N-term',
                                           'iTRAQ4 (Y fixed)': 'iTRAQ 4-plex of K,iTRAQ 4-plex of Y,iTRAQ 4-plex of peptide N-term',
                                           'iTRAQ4 (Y variable)': 'iTRAQ 4-plex of K,iTRAQ 4-plex of peptide N-term',
                                           'iTRAQ8 (Y fixed)': 'iTRAQ 8-plex of K,iTRAQ 8-plex of Y,iTRAQ 8-plex of peptide N-term',
                                           'iTRAQ8 (Y variable)': 'iTRAQ 8-plex of K,iTRAQ 8-plex of peptide N-term'},
                                          value='iTRAQ 8-plex of K,iTRAQ 8-plex of Y,iTRAQ 8-plex of peptide N-term')

        self.missed_cleavages = widgets.IntSlider(min=0, max=10, step=1, value=1)
        self.fixed_ptms = widgets.Dropdown(options=["Carbamidomethylation of C", "None"])

        # PTMs
        self.var_ptms = widgets.SelectMultiple(
            options=["Oxidation of M",
                     "Phosphorylation of STY",
                     "Acetylation of peptide N-term",
                     "Acetylation of protein N-term"],
            value=['Oxidation of M'])

        self.spectra_dir = widgets.Dropdown(options={"IN": "IN"})

        # basic stat input fields
        self.summarization_method = widgets.Dropdown(options=
                                                     {"Median of all PSMs": "median",
                                                      "Average of all PSMs": "mean",
                                                      "Median with removal of outliers": "medpolish",
                                                      "iPQF: weighted by peptide features (also removes all proteins with missing values)": "iPQF",
                                                      "Robust summarization (linear model rlm)" : "robust"},
                                                     value='iPQF')
        self.min_protein_psms = widgets.IntSlider(min=0, max=10, step=1, value=1)
        self.use_ptms_for_quant = widgets.Checkbox(value=True, description="Use PTMs for quantification")

        # get number of experimental conditions
        self.number_groups = widgets.IntSlider(min=2, max=20, step=1, value=2)


        # button to show experimental design
        self.exp_des_button = widgets.Button(
            description='Enter design',
            disabled=False,
            button_style='',  # 'success', 'info', 'warning', 'danger' or ''
            tooltip='Enter experimental design',
            icon='check'
        )

        self.exp_des_button.on_click(lambda _: self.show_exp_design())
        # create the expDesignUI object once the search UI is being displayed
        self.expDesignUI = None

    def get_work_dir(self):
        return os.path.abspath(os.path.join(self.work_dir_select.value, "OUT"))

    def get_labelling_method(self):
        return list(self.labelling.options.keys())[self.labelling.index]

    def show_exp_design(self):
        """
        Display the experimental design dialog. This function is called
        through the button at the end of the SearchUI dialog
        """

        # disable the exp_design button and the labelling method
        self.exp_des_button.disabled = True
        self.labelling.disabled = True
        self.work_dir_select.disabled = True

        # self.tab.selected_index = 1
        self.expDesignUI = ExpDesignUI(self)
        display(self.expDesignUI.get_root_widget())

    def updateFastaFiles(self, workdir):
        """
        Update the drop-down list that lists all available FASTA files found in the
        current input directory.]
        :param workdir: The current working directory used to search for FASTA files.
        """
        # get all FASTA files
        fasta_files = [file for file in os.listdir(workdir)
                               if file.endswith(".fasta") and ('decoy' not in file)]

        # also search all subdirectories for FASTA files
        for d in os.listdir(workdir):
            d_path = os.path.join(workdir, d)
            if os.path.isdir(d_path) and d[0] != ".":
                fasta_files += [os.path.join(d, file) for file in os.listdir(d_path)
                                                        if file.endswith(".fasta") and ('decoy' not in file)]

        # create the dict to add as values to the control
        file_list = dict()
        sel_value = None

        for f in fasta_files:
            file_list[f] = os.path.join(os.path.abspath(workdir), f)
            if sel_value is None:
                sel_value = os.path.join(os.path.abspath(workdir), f)

        self.fasta_db.options = file_list
        self.fasta_db.value = sel_value

        # update the list of possible peaklist directories
        directories = [d for d in os.listdir(workdir) if os.path.isdir(os.path.join(workdir, d)) and d[0] != "."]

        dir_list = dict()

        for d in directories:
            dir_list[d] = os.path.join(os.path.abspath(workdir), d)

        self.spectra_dir.options = dir_list

        if "IN" in dir_list:
            self.spectra_dir.value = dir_list["IN"]



    def display(self):
        """
        Displays the search user interface.
        """
        self.updateFastaFiles(self.work_dir_select.value)

        search_box = VBox([widgets.HTML(
    value="<h4>Folders and files</h4>"),
                           Label('Fasta file (database, must NOT contain decoy sequences):'), self.fasta_db,
                           self.generate_decoy,
                           Label('Working directory (existing files will be deleted!)'), self.work_dir_select,
                           Label('Folder for spectra files (files need to be mgf)'), self.spectra_dir,
                               widgets.HTML(value="<h4>Database search</h4>"),
        Label('Precursor tolerance (ppm):'), self.precursor_tolerance,
                           Label('Fragment ion tolerance (da):'), self.fragment_tolerance,
                           Label('Number of miscleavages;'), self.missed_cleavages,
                           Label('Further fixed modifications'), self.fixed_ptms,
                           Label('Further variable modifications (Hold Ctrl to select multiple)'), self.var_ptms,
                           Label('Target (protein, peptide, and PSM) FDR:'), self.target_fdr,
                           Label('Quantification method:'), self.labelling,
                               widgets.HTML(value="<h4>Quantification</h4>"),
                           Label('Summarization method:'), self.summarization_method,
                           Label('Minimum number of PSMs per protein:'), self.min_protein_psms,
                           self.use_ptms_for_quant,
                           Label('Number of different experimental conditions (e.g. control and treatment)'), self.number_groups,
                           Label('Note: When entering the experimental design, the working directory and '
                                 'labelling method can no longer be changed.'),
                           self.exp_des_button])

        ui = search_box
        display(ui)

    def _ipython_display_(self):
        return self.display()

    def get_settings_as_dict(self):
        """
        Transform all settings entered by the user into a dict.
        :return:
        """
        search_config = dict()
        search_config["workdir"] = self.get_work_dir()
        search_config["precursor_tolerance"] = self.precursor_tolerance.value
        search_config["fragment_tolerance"] = self.fragment_tolerance.value
        search_config["fasta_db"] = self.fasta_db.value
        search_config["generate_decoy"] = self.generate_decoy.value
        search_config["labelling"] = self.labelling.value
        search_config["labelling_method"] = self.get_labelling_method()
        search_config["missed_cleavages"] = self.missed_cleavages.value
        search_config["fixed_ptms"] = self.fixed_ptms.value
        search_config["var_ptms"] = self.var_ptms.value
        search_config["summarization_method"] = self.summarization_method.value
        search_config["min_protein_psms"] = self.min_protein_psms.value
        search_config["use_ptms_for_quant"] = self.use_ptms_for_quant.value
        search_config["target_fdr"] = self.target_fdr.value
        search_config["input_directory"] = self.spectra_dir.value
        search_config["number_groups"] = self.number_groups.value

        return search_config

    def save_config(self, file):
        """
        Save all configurations set by the user into a JSON formatted
        text file.
        :param: file: The name of the target file to use. Will be overwritten if it exists.
        """
        search_config = self.get_settings_as_dict()

        json_string = json.dumps(search_config)

        with open(file, "w") as writer:
            writer.write(json_string + "\n")


class ExpDesignUI:
    def __init__(self, searchUI: SearchUI):
        """
        Generates all use interface objects as member variables.

        :param searchUI: Parent user interface
        """

        self.searchUI = searchUI

        self.result_file_path = os.path.join(searchUI.get_work_dir(), "exp_design.tsv")


        self.group_names = list()
        self.group_ids = list()
        self.group_names.append(widgets.Text(placeholder="Control", description="Group 1:"))
        self.group_ids.append("Group 1")
        for group in range(1,searchUI.number_groups.value ):
            self.group_names.append(widgets.Text(placeholder="Treatment " + str(group), description="Group " + str(group+1) + ":"))
            self.group_ids.append("Group " + str(group+1))

        self.channels = {
            'TMT6': ["126", "127", "128", "129", "130", "131"],
            'TMT10': ["126", "127N", "127C", "128N", "128C", "129N", "129C", "130N", "130C", "131"],
            'iTRAQ4': ["114", "115", "116", "117"],
            'iTRAQ8': ["113", "114", "115", "116", "117", "118", "119", "121"]
        }

        # removed everything in string labellign_technique after space
        labelling_method = searchUI.get_labelling_method()
        if labelling_method.split(" ")[0] not in self.channels:
            raise Exception("Unknown labelling technique: '" + labelling_method + "'")

        self.labelling_technique = labelling_method.split(" ")[0]

        # generate the textfields for the channels
        self.channel_names = list()

        for channel in self.channels[self.labelling_technique]:
            self.channel_names.append(widgets.Text(description=channel, placeholder="Sample " + channel))

        # add select boxes to select the experimental group
        self.group_selects = list()
        
        
        for channel in self.channels[self.labelling_technique]:
            self.group_selects.append(widgets.Dropdown(options=self.group_ids, value="Group 1"))

        self.save_button = widgets.Button(
            description='Save design',
            disabled=False,
            button_style='',  # 'success', 'info', 'warning', 'danger' or ''
            tooltip='Save the experimental design',
            icon='check'
        )

        self.save_button.on_click(self.save_design)

        self.search_button_visible = False

    def get_root_widget(self):
        """
        Displays the user interface to enter the experimental design.
        """
        widget_list = list()
        widget_list.append(widgets.Label("Treatment group names:"))
        widget_list.extend(self.group_names)
        widget_list.append(widgets.Label("Sample names (per chanel):"))

        for i in range(0, len(self.channel_names)):
            widget_list.append(widgets.HBox([self.channel_names[i], self.group_selects[i]]))

        widget_list.append(self.save_button)

        widget_box = VBox(widget_list)

        return widget_box

    def save_design(self, button):
        """
        Save the experimental design as a TSV file.
        :param button: The button that triggered the function.
        """
        global search_ui_in

        # get all names
        sample_names = [s.value if s.value != "" else s.placeholder for s in self.channel_names]
        channel_names = self.channels[self.labelling_technique]
        sample_group = [g.value for g in self.group_selects]
        sample_group_names = list()

        # replace the group names
        for i in range(0, len(sample_group)):
            ind = int(sample_group[i].replace("Group ","")) -1 
            sample_group_names.append(self.group_names[ind].value if self.group_names[ind].value != "" else self.group_names[ind].placeholder)
  

        # TODO: missing file names
        design_data = pd.DataFrame(
            data={'channel': channel_names, 'sample_name': sample_names, 'sample_group': sample_group, 'sample_orig': sample_group_names, 'spec_dir': self.searchUI.spectra_dir.value},
        )

        design_data.to_csv(path_or_buf=self.result_file_path, sep="\t", index=False)

        # add the run search button
        if not self.search_button_visible:
            self.search_button = widgets.Button(
                description=search_ui_in["on_complete_description"],
                disabled=False,
                button_style='',  # 'success', 'info', 'warning', 'danger' or ''
                icon='check'
            )

            self.search_button.on_click(
                lambda _: final_button_clicked(self.searchUI, self.result_file_path)
            )

            search_box = VBox([self.search_button])
            display(search_box)

            self.search_button_visible = True


# global stuff
if __name__ == "__main__":
    main()
